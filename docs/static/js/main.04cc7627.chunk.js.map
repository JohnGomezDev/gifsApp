{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifCard.js","components/GifGrid.js","hooks/useFecthGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","placeholder","value","onChange","target","getGifs","category","a","baseUrl","fetch","encodeURI","response","json","data","gifs","map","gif","id","title","url","images","downsized_medium","GifCard","className","src","alt","GifGrid","categories","loading","state","setState","useEffect","then","useFetchGifs","sections","document","querySelectorAll","classList","add","onClick","filteredData","filter","categoriesToLeft","GifApp","props","newCategory","rootDiv","getElementById","ReactDOM","render"],"mappings":"mMAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAgBvC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,EAAcE,EAAWK,QACzBJ,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,YAAY,eACZC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uBCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DAEJ,mCACTC,EAHa,uDAEJ,mCAFI,wBAKIC,MAAM,GAAD,OAAID,GAAJ,OAAcE,UAAUJ,KALjC,cAKbK,EALa,gBAMIA,EAASC,OANb,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAZvB,kBAgBZL,GAhBY,4CAAH,sDCmBLQ,EAhBC,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACrB,OACI,sBAAKI,UAAU,WAAf,UACI,mBAAGA,UAAU,YAAb,SAA0BL,IAC1B,qBAAKK,UAAU,cAAf,SACI,qBAAKC,IAAKL,EAAKM,IAAKP,UC6CrBQ,EA/CC,SAAC,GAA6C,IAA3CpB,EAA0C,EAA1CA,SAAUqB,EAAgC,EAAhCA,WAAYpC,EAAoB,EAApBA,cAAoB,ECHjC,SAACe,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAlB,GAAI,OAAIgB,EACV,CACIjB,KAAMC,EACNc,SAAS,SAGtB,CAACtB,IAEGuB,EDXyBI,CAAa3B,GAA/BQ,EAF2C,EAEjDD,KAAYe,EAFqC,EAErCA,QAEpBG,qBAAU,WACN,IAAMG,EAAWC,SAASC,iBAAiB,YAExCF,EAASnC,OAAS,IACjBmC,EAAS,GAAGG,UAAUC,IAAI,qBAC1BJ,EAAS,GAAGG,UAAUC,IAAI,2BAG/B,IAOH,OACI,sBAAKf,UAAU,UAAf,UACI,sBAAKA,UAAU,cAAf,UACI,+BAAKjB,EAAL,WACA,wBAAQiC,QATS,WACzB,IAAMC,EAAeb,EAAWc,QAAO,SAAAC,GAAgB,OAAIA,IAAqBpC,KAChFf,EAAciD,IAON,2BAGFZ,GAAW,2CAEb,qBAAKL,UAAU,gBAAf,SAEQT,EAAKC,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,IAAd,OACL,cAAC,EAAD,CAEID,MAAOA,EACPC,IAAKA,GAFAF,YEAlB0B,EAhCA,SAACC,GAAW,IAAD,EAEcpD,mBAAS,CAAC,cAAe,0BAFvC,mBAEfmC,EAFe,KAEHpC,EAFG,KAQtB,OACI,sBAAK0B,GAAG,iBAAR,UACI,sBAAKM,UAAU,SAAf,UACI,oBAAIA,UAAU,aAAd,yBAEA,cAAC,EAAD,CAAahC,cATC,SAACsD,GACvBtD,EAAc,CAACsD,GAAF,mBAAkBlB,WAW3B,qBAAKJ,UAAU,iBAAf,SAEQI,EAAWZ,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,EACVf,cAAeA,EACfoC,WAAYA,GAHPrB,YCrB3BwC,G,MAAUX,SAASY,eAAe,SAExCC,IAASC,OAAO,cAAC,EAAD,IAAYH,K","file":"static/js/main.04cc7627.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState(''); \n    \n    const handleInputChange = (e) => {\n        setInputValue(e.target.value); //Capturar valor del input y hacer que podamos escribir en el\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 1) {\n            setCategories(inputValue.trim());\n            setInputValue(''); //Limpiar input\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit } >\n            <input \n                type='text'\n                placeholder='ej. Among Us'\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGifs = async(category) => {\n\n    const apiKey = 'tBHV0kdmfzViz5dg5h85R2C9R6F9g00r';\n    const baseUrl = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&limit=7&q=`;\n\n    const response = await fetch(`${baseUrl}${encodeURI(category)}`);\n    const { data } = await response.json();\n\n    const gifs = data.map(gif => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            url: gif.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst GifCard = ({title, url}) => {\n    return (\n        <div className='gif-card'>\n            <p className='gif-title'>{title}</p>\n            <div className='gif-wrapper'>\n                <img src={url} alt={title}/>\n            </div>\n        </div>\n    )\n};\n\nGifCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}\n\nexport default GifCard\n","import React, { useEffect } from 'react'\nimport { useFetchGifs } from '../hooks/useFecthGifs';\nimport PropTypes from 'prop-types'\n\nimport GifCard from './GifCard';\n\nconst GifGrid = ({ category, categories, setCategories }) => {\n\n    const { data: gifs, loading } = useFetchGifs(category);\n\n    useEffect(() => {\n        const sections = document.querySelectorAll('.section');\n        \n        if(sections.length > 2) {\n            sections[0].classList.add('animate__animated');\n            sections[0].classList.add('animate__slideInDown');\n        }\n\n    }, []);\n\n    const handleDeleteCategory = () => {\n        const filteredData = categories.filter(categoriesToLeft => categoriesToLeft !== category)\n        setCategories(filteredData);\n    };\n\n    return (\n        <div className='section'>\n            <div className='buttons-box'>\n                <h3>{category} Gifs</h3>\n                <button onClick={ handleDeleteCategory } >X Eliminar</button>\n            </div>\n\n            { loading && <p>Cargando..</p> }\n            \n            <div className='cards-wrapper'>\n                {\n                    gifs.map(({ id, title, url }) => (\n                        <GifCard \n                            key={id}\n                            title={title}\n                            url={url}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n    )\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(gifs => setState(\n                {\n                    data: gifs,\n                    loading: false\n                }\n            ));\n    }, [category]);\n\n    return state;\n};","import React, { useState } from 'react'\n// import PropTypes from 'prop-types'\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifApp = (props) => {\n\n    const [categories, setCategories] = useState(['Tokyo Ghoul', 'Darling in the franxx']);\n\n    const handleAddCategory = (newCategory) => {\n        setCategories([newCategory, ...categories]);\n    };\n\n    return (\n        <div id='main-container'>\n            <div className='header'>\n                <h1 className='main-title'>Gifs getter</h1>\n\n                <AddCategory setCategories={ handleAddCategory }/>\n            </div>\n\n            <div className='gifs-container'>\n                {\n                    categories.map( category => \n                        <GifGrid \n                            key={category} \n                            category={category}\n                            setCategories={setCategories}\n                            categories={categories}\n                        />\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default GifApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifApp from './GifApp';\nimport './index.css';\n\nconst rootDiv = document.getElementById('root');\n\nReactDOM.render(<GifApp /> ,rootDiv);\n\n"],"sourceRoot":""}